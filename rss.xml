<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/scripts/pretty-feed-v3.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:h="http://www.w3.org/TR/html4/"><channel><title>Anthony J. G.</title><description>A Chaotic Digital Garden</description><link>https://astro-pure.js.org</link><item><title>World Building Philosophy</title><link>https://astro-pure.js.org/garden/philosphy-of-worldbuilding</link><guid isPermaLink="true">https://astro-pure.js.org/garden/philosphy-of-worldbuilding</guid><description>3D imagery has the power to bring cinematic visions to life and help accurately plan tomorrow’s cityscapes. Here, 3D expert Ricardo Ortiz explains how it works.</description><pubDate>Wed, 09 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;3D rendering is all around us. From huge action movies to car commercials to previews of upcoming buildings or product designs, 3D visualization has become so widespread and realistic that you probably don’t even know it’s there.&lt;/p&gt;
&lt;p&gt;In this introductory piece, Chaos’ Ricardo Ortiz explains the basics of 3D rendering, from the computational methods that create imagery to the artistic techniques that create great computer-generated (CG) content and its various uses.&lt;/p&gt;
&lt;h2&gt;What is 3D Rendering?&lt;/h2&gt;
&lt;p&gt;Put simply, 3D rendering is the process of using a computer to generate a 2D image from a digital three-dimensional scene.&lt;/p&gt;
&lt;p&gt;To generate an image, specific methodologies and special software and hardware are used. Therefore, we need to understand that 3D rendering is a process—the one that builds the image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://astro-pure.js.org/_astro/nikola-arsov-still-life-interior-design-vray-3ds-max-05-930px.DoY3_oVo_Z1nNwxU.webp&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Types of 3D rendering&lt;/h2&gt;
&lt;p&gt;We can create different types of rendered image; they can be realistic or non-realistic.&lt;/p&gt;
&lt;p&gt;A realistic image could be an architectural interior that looks like a photograph, a product-design image such as a piece of furniture, or an automotive rendering of a car. On the other hand, we can create a non-realistic image such as an outline-type diagram or a cartoon-style image with a traditional 2D look. Technically, we can visualize anything we can imagine.&lt;/p&gt;
&lt;h2&gt;How is 3D rendering used?&lt;/h2&gt;
&lt;p&gt;3D rendering is an essential technique for many industries including architecture, product design, advertising, video games and visual effects for film, TV and animation.&lt;/p&gt;
&lt;p&gt;In design and architecture, renders allow creative people to communicate their ideas in a clear and transparent way. A render gives them the chance to evaluate their proposals, experiment with materials, conduct studies and contextualize their designs in the real world before they are built or manufactured.&lt;/p&gt;
&lt;p&gt;For the media and entertainment industries, 3D rendering is fundamental to the creation of sequences and animations that tell stories, whether we’re watching an animated movie, a period drama, or an action sequence with explosions, ships from the future, exotic locales, or extraterrestrial creatures.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://astro-pure.js.org/_astro/thanos-dd-single-image-004a.DUX4VGf-_ZVCMNM.webp&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Over the past few years, the evolution of computer graphics in these industries has replaced traditional techniques. For example, special effects are being replaced by visual effects, which means stunt people no longer risk their lives in car crashes.&lt;/p&gt;
&lt;p&gt;In advertising, I would dare to say that 90% of automotive commercials are CG—or even more. In the architecture industry, many traditional techniques to create representations, such as scale models, have been replaced with photorealistic imagery to ensure we can see exactly how something will look once it’s built.&lt;/p&gt;
&lt;p&gt;Accelerating processes, reducing costs and the demand for better quality results have helped technology evolve. Hardware is more powerful than ever and the switch to CG was inevitable.&lt;/p&gt;
&lt;h2&gt;How is a 3D rendered image generated?&lt;/h2&gt;
&lt;p&gt;Two pieces of software, with different characteristics, are used to computer-generate images and animations: render engines and game engines. Render engines use a technique called ray tracing, while game engines use a technique called rasterization—and some engines mix both techniques, but we will talk about that later on.&lt;/p&gt;</content:encoded><h:img src="/_astro/thumbnail.DzZDiYKA.jpg"/><enclosure url="/_astro/thumbnail.DzZDiYKA.jpg"/></item><item><title>Managing Bulky Binary Assets with Vcpkg</title><link>https://astro-pure.js.org/garden/bulky-binary-management</link><guid isPermaLink="true">https://astro-pure.js.org/garden/bulky-binary-management</guid><description>Large binary files are a cost on any substantially sized project. Microsoft&apos;s Vcpkg manager presents an interesting possible solution.</description><pubDate>Sun, 09 Feb 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;During software development, controlling the version has many positive implications when it comes to compatibility and security. Of the different kinds version control software generally available, Git is considered ubiquitous by many when it comes to managing the source tree.&lt;/p&gt;
&lt;p&gt;One of the biggest points of friction for Git occurs when trying to integrate external assets into a project. This can come in the form of precompiled binary library files, image files, databases, 3d models, and more. These file types are bulky, bloated, and are hard for Git to compare differences to.&lt;/p&gt;
&lt;p&gt;Git saves the only the differences between multiple versions of the same file as opposed to the file in it&apos;s entirety multiple times to prevent from tracking redundant information. This means that a single file could be edited a huge number of times but still keep the &lt;code&gt;.git/&lt;/code&gt; folder that saves metadata for the project very lightweight. The problem with binary files occurs due to the nature of how most binary files are created. Regardless of the data being saved, most often a small change in the data the binary file represents can make a massive change in the underlying structure of the binary. This means that tracking all of the possible information that the binary file can have results in a larger memory footprint inside of Git, and in turn gives the repository a larger memory footprint.&lt;/p&gt;
&lt;p&gt;A working example of this can be seen in the repository for the &lt;a href=&quot;https://github.com/odin-lang/Odin&quot;&gt;Odin programming language&lt;/a&gt;. The language repository commits vendored libraries, such as &lt;a href=&quot;https://github.com/odin-lang/Odin/blob/master/vendor/sdl3/SDL3.dll&quot;&gt;SDL3&lt;/a&gt; directly into the source tree so that maintainers can have easy access to any necessary dependencies during development. This provides a convenience for anyone who wants to get started either in development on the language or creating a new project using the language. This also follows closely with Odin&apos;s design philosophy for being simple with a focus on actually creating software projects instead of focusing on the framework supporting them. However, what is the cost of this direct inclusion? We can use Git and a little bit of Python code to figure that out.&lt;/p&gt;
&lt;h2&gt;Odin: A Memory Footprint Case Study&lt;/h2&gt;
&lt;p&gt;After cloning the &lt;a href=&quot;https://github.com/odin-lang/Odin/commit/62e797b9d15d32b7db906e99e98f0943bf2aa6e3&quot;&gt;repository with a given SHA hash for consitency&lt;/a&gt; and no further manipluation, Windows calculates the total size of the repository as &lt;code&gt;930 MB&lt;/code&gt; and the total size of the &lt;code&gt;.git/&lt;/code&gt; metadata folder as &lt;code&gt;520 MB&lt;/code&gt;. This is a percentage footprint of over 50%!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://astro-pure.js.org/_astro/odin_breakdown-of-repo-mem-footprint_chart.Vlm4pwAe_Z79YYw.webp&quot; alt=&quot;Figure [odin-chart-1]: Memory footprint of different top-level folders of the repository&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can further break this down to do an analysis on the Git metadata itself to see where most of this memory is accumulating.&lt;/p&gt;
&lt;h2&gt;Supply Chain Attacks&lt;/h2&gt;
&lt;p&gt;Does Git have the technical capability to track binary files? Yes, and in fact there are a whole host of people who add them directly to their source tree, external vendored libraries in the programming language &lt;a href=&quot;&quot;&gt;Odin&lt;/a&gt; is an example of this. The real costs of doing this however is two fold, a minimal amount of updates to binary files across commit history can drastically affect the total size of the repository and it can additionally increase the probability that your repository is vulnerable to &lt;a href=&quot;https://en.wikipedia.org/wiki/XZ_Utils_backdoor#Mechanism&quot;&gt;supply chain attacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To address this problem in C/C++ projects specifically, Microsoft created the package management tool &lt;a href=&quot;https://vcpkg.io/en/&quot;&gt;vcpkg&lt;/a&gt;. Using similar design philosophies as other package managers such as &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;, vcpkg&apos;s core tenents are about improving the C/C++ build pipeline to make any pipeline better at supporting cross-platform compilation as well as adding external binary libraries to any possible build and project system. At this point, you might be curious as to what the point of talking about a C/C++ build tool is when you might not care at all about C or C++. That&apos;s a fair line of reasoning, and the counter to that is one critical line taken directly from the vcpkg website; &quot;Create your own custom library registry with your own custom library packages&quot;.&lt;/p&gt;
&lt;h1&gt;Related Work&lt;/h1&gt;
&lt;p&gt;placeholder&lt;/p&gt;</content:encoded><h:img src="/_astro/thumbnail.DzZDiYKA.jpg"/><enclosure url="/_astro/thumbnail.DzZDiYKA.jpg"/></item><item><title>Constructing an Interactive Editor In C/C++</title><link>https://astro-pure.js.org/garden/constructing-an-interactive-editor</link><guid isPermaLink="true">https://astro-pure.js.org/garden/constructing-an-interactive-editor</guid><description>There is a lot of power in being able to re-compile code while it&apos;s still running. This case study reviews an example of how to implement this in C/C++.</description><pubDate>Sun, 09 Feb 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In any kind of creative field, the ability to rapidly prototype a product can bring clarity to the design process. In the domains of programming and computer science, a critical aspect of this is reducing what I&apos;m going to refer to as &quot;flow braking&quot;. Flow braking can be anything that results in either waiting around for the computer to do something and/or having concentration be taken away from actual development.&lt;/p&gt;
&lt;p&gt;Examples of this are sifting language manuals for correct definitions, downloading/installing dependencies, and perhaps the most eggregious, re-compiling the source code. And while there are viable solutions to former two, such as Language Server Protocols (LSPs) and build tools, incessant re-compilation can prove to be a tricky problem to solve.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/compiling.png&quot; alt=&quot;xkcd compiling&quot;&gt;&lt;/p&gt;
&lt;h2&gt;What even is compilation?&lt;/h2&gt;
&lt;p&gt;For the uninitiated, source code needs to go through a transformation into machine instructions in order for a computer to understand how it should be executed. For scripting languages such as JavaScript or Python, they get converted to &lt;em&gt;byte code&lt;/em&gt;&lt;/p&gt;</content:encoded><h:img src="/_astro/thumbnail.DzZDiYKA.jpg"/><enclosure url="/_astro/thumbnail.DzZDiYKA.jpg"/></item></channel></rss>